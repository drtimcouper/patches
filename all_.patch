From dde31c0e583b150c438d163a10c985b60b275cae Mon Sep 17 00:00:00 2001
From: Tim Couper <drtimcouper@gmail.com>
Date: Tue, 27 Mar 2012 11:52:14 +0100
Subject: [PATCH 1/2] added __all__ to completer.py and added basic tests for test_dir2

---
 IPython/core/completer.py            |   30 ++++++++++++++++++++++++++----
 IPython/core/tests/test_completer.py |   14 +++++++++++++-
 2 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/IPython/core/completer.py b/IPython/core/completer.py
index ae96e72..f2428e8 100644
--- a/IPython/core/completer.py
+++ b/IPython/core/completer.py
@@ -336,7 +336,6 @@ class Completer(Configurable):
         #io.rprint('Completer->attr_matches, txt=%r' % text) # dbg
         # Another option, seems to work great. Catches things like ''.<tab>
         m = re.match(r"(\S+(\.\w+)*)\.(\w*)$", text)
-
         if m:
             expr, attr = m.group(1, 3)
         elif self.greedy:
@@ -346,7 +345,7 @@ class Completer(Configurable):
             expr, attr = m2.group(1,2)
         else:
             return []
-
+        
         try:
             obj = eval(expr, self.namespace)
         except:
@@ -355,7 +354,10 @@ class Completer(Configurable):
             except:
                 return []
 
-        words = dir2(obj)
+        if self.limit_to__all__ and hasattr(obj, '__all__'):
+            words = get__all__entries(obj)
+        else: 
+            words = dir2(obj)
 
         try:
             words = generics.complete_object(obj, words)
@@ -371,6 +373,16 @@ class Completer(Configurable):
         return res
 
 
+def get__all__entries(obj):
+    """returns the strings in the __all__ attribute"""
+    try:
+        words = getattr(obj,'__all__')
+    except:
+        return []
+    
+    return [w for w in words if isinstance(w, basestring)]
+
+
 class IPCompleter(Completer):
     """Extension of the completer class with IPython-specific features"""
 
@@ -403,6 +415,16 @@ class IPCompleter(Completer):
         When 0: nothing will be excluded.
         """
     )
+    limit_to__all__ = Enum((0,1), default_value=1, config=True,
+        help="""Instruct the completer to use __all__ for the completion
+        
+        Specifically, when completing on ``object.<tab>``.
+        
+        When 1: only those names in obj.__all__ will be included.
+        
+        When 0 [default]: the values in the __all__ attribute are ignored
+        """
+    )
 
     def __init__(self, shell=None, namespace=None, global_namespace=None,
                  alias_table=None, use_readline=True,
@@ -602,7 +624,7 @@ class IPCompleter(Completer):
 
     def python_matches(self,text):
         """Match attributes or global python names"""
-
+        
         #io.rprint('Completer->python_matches, txt=%r' % text) # dbg
         if "." in text:
             try:
diff --git a/IPython/core/tests/test_completer.py b/IPython/core/tests/test_completer.py
index 34cdff0..2f9ea48 100644
--- a/IPython/core/tests/test_completer.py
+++ b/IPython/core/tests/test_completer.py
@@ -18,6 +18,7 @@ from IPython.core import completer
 from IPython.external.decorators import knownfailureif
 from IPython.utils.tempdir import TemporaryDirectory
 from IPython.utils.generics import complete_object
+from IPython.testing.globalipapp import get_ipython
 
 #-----------------------------------------------------------------------------
 # Test functions
@@ -229,4 +230,15 @@ def test_omit__names():
     nt.assert_false('ip.__str__' in matches)
     nt.assert_false('ip._hidden_attr' in matches)
     del ip._hidden_attr
-    
\ No newline at end of file
+
+def test_get__all__entries_ok():
+  class A(object):
+    __all__ = ['x', 1]
+  words = completer.get__all__entries(A())
+  nt.assert_equal(words, ['x'])
+
+def test_get__all__entries_no__all__ok():
+  class A(object):
+      pass
+  words = completer.get__all__entries(A())
+  nt.assert_equal(words, [])
\ No newline at end of file
-- 
1.7.1


From 6ad0372c633540cd73333574d73e84318e14af04 Mon Sep 17 00:00:00 2001
From: Tim Couper <drtimcouper@gmail.com>
Date: Tue, 27 Mar 2012 11:59:59 +0100
Subject: [PATCH 2/2] Added test_dir2 for the dir2 (bonus) tests

---
 IPython/core/completer.py            |    3 +-
 IPython/core/tests/test_completer.py |    3 +-
 IPython/utils/tests/test_dir2.py     |   51 ++++++++++++++++++++++++++++++++++
 3 files changed, 54 insertions(+), 3 deletions(-)
 create mode 100644 IPython/utils/tests/test_dir2.py

diff --git a/IPython/core/completer.py b/IPython/core/completer.py
index f2428e8..da2a866 100644
--- a/IPython/core/completer.py
+++ b/IPython/core/completer.py
@@ -336,6 +336,7 @@ class Completer(Configurable):
         #io.rprint('Completer->attr_matches, txt=%r' % text) # dbg
         # Another option, seems to work great. Catches things like ''.<tab>
         m = re.match(r"(\S+(\.\w+)*)\.(\w*)$", text)
+    
         if m:
             expr, attr = m.group(1, 3)
         elif self.greedy:
@@ -345,7 +346,7 @@ class Completer(Configurable):
             expr, attr = m2.group(1,2)
         else:
             return []
-        
+    
         try:
             obj = eval(expr, self.namespace)
         except:
diff --git a/IPython/core/tests/test_completer.py b/IPython/core/tests/test_completer.py
index 2f9ea48..ab2c7b6 100644
--- a/IPython/core/tests/test_completer.py
+++ b/IPython/core/tests/test_completer.py
@@ -18,7 +18,6 @@ from IPython.core import completer
 from IPython.external.decorators import knownfailureif
 from IPython.utils.tempdir import TemporaryDirectory
 from IPython.utils.generics import complete_object
-from IPython.testing.globalipapp import get_ipython
 
 #-----------------------------------------------------------------------------
 # Test functions
@@ -241,4 +240,4 @@ def test_get__all__entries_no__all__ok():
   class A(object):
       pass
   words = completer.get__all__entries(A())
-  nt.assert_equal(words, [])
\ No newline at end of file
+  nt.assert_equal(words, [])
diff --git a/IPython/utils/tests/test_dir2.py b/IPython/utils/tests/test_dir2.py
new file mode 100644
index 0000000..c06e982
--- /dev/null
+++ b/IPython/utils/tests/test_dir2.py
@@ -0,0 +1,51 @@
+import nose.tools as nt
+from IPython.utils.dir2 import dir2
+
+
+class Base(object):
+    x = 1
+    z = 23
+
+
+def test_base():
+    res = dir2(Base())
+    assert ('x' in res)
+    assert ('z' in res)
+    assert ('y' not in res)
+    assert ('__class__' in res)
+    nt.assert_equal(res.count('x'), 2)  # duplicates
+    nt.assert_equal(res.count('__class__'), 4) # duplicates
+
+def test_SubClass():
+
+    class SubClass(Base):
+        y = 2
+
+    res = dir2(SubClass())
+    assert ('y' in res)
+    nt.assert_equal(res.count('y'), 2) # duplicates,
+    nt.assert_equal(res.count('x'), 3) # duplicates, but fewer than above!
+
+
+def test_SubClass_with_trait_names_method():
+
+    class SubClass(Base):
+        y = 2
+        def trait_names(self):
+            return ['t', 'umbrella']
+
+    res = dir2(SubClass())
+    assert('trait_names' in res)
+    assert('umbrella' in res)
+    nt.assert_equal(res.count('t'), 1)
+
+
+def test_SubClass_with_trait_names_attr():
+    # usecase: trait_names is used in a class describing psychological classification
+
+    class SubClass(Base):
+        y = 2
+        trait_names = 44
+
+    res = dir2(SubClass())
+    assert('trait_names' in res)
-- 
1.7.1

